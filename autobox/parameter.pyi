# -*- coding: utf-8 -*-
"""
Parameter Stubs
"""


from typing import Any, ClassVar, NoReturn, Self, Type

from autobox.filter import (
    AbstractFilter, ArealUnitFilter, DoubleRangeFilter, DoubleValueFilter,
    FeatureClassTypeFilter, FieldTypeFilter, FileTypeFilter, LinearUnitFilter,
    LongRangeFilter, LongValueFilter, StringValueFilter, WorkspaceTypeFilter)
from autobox.type import BOOL, MAP_STR, STRING, TYPE_FILTERS, TYPE_PARAMS


class BaseParameter:
    """
    Base Parameter
    """
    keyword: ClassVar[str]
    dependency_types: ClassVar[TYPE_PARAMS]
    filter_types: ClassVar[TYPE_FILTERS]

    _label: str
    _name: str
    _category: STRING
    _description: STRING
    _default: Any
    _is_input: bool
    _is_required: BOOL
    _is_multi: bool
    _is_enabled: bool
    _dependency: InputOutputParameter | None
    _filter: AbstractFilter | None

    def __init__(self, label: str, name: STRING = None, category: STRING = None,
                 description: STRING = None, default_value: Any = None,
                 is_input: bool = True, is_required: BOOL = True,
                 is_multi: bool = False, is_enabled: bool = True) -> None: ...
    @staticmethod
    def _validate_label(label: str) -> str | NoReturn: ...
    @staticmethod
    def _validate_name(name: STRING, label: str) -> str: ...
    @staticmethod
    def _validate_type(value: Any, types: tuple[Type, ...], text: str) -> Any: ...
    def _build_parameter_type(self) -> dict[str, STRING]: ...
    def _build_direction(self) -> dict[str, STRING]: ...
    def _build_display_name(self) -> tuple[MAP_STR, MAP_STR]: ...
    def _build_category(self, categories: dict[str, int]) -> dict[str, STRING]: ...
    def _build_data_type(self) -> dict[str, str | MAP_STR]: ...
    def _build_filter(self) -> tuple[dict, MAP_STR]: ...
    def _build_dependency(self) -> MAP_STR: ...
    def _build_schema(self) -> MAP_STR: ...
    def _build_default_value(self) -> dict[str, Any]: ...
    def _build_description(self) -> tuple[MAP_STR, MAP_STR]: ...
    def _serialize(self, categories: dict[str, int]) -> tuple[dict[str, dict], MAP_STR]: ...
    @property
    def name(self) -> str: ...
    @property
    def label(self) -> str: ...
    @property
    def category(self) -> STRING: ...
    # noinspection PyUnresolvedReferences
    @category.setter
    def category(self, value: STRING) -> None: ...
    @property
    def description(self) -> STRING: ...
    # noinspection PyUnresolvedReferences
    @description.setter
    def description(self, value: STRING) -> None: ...
    @property
    def default_value(self) -> Any: ...
    # noinspection PyUnresolvedReferences
    @default_value.setter
    def default_value(self, value: Any) -> None: ...
    @property
    def is_input(self) -> bool: ...
    @property
    def is_required(self) -> BOOL: ...
    @property
    def is_multi(self) -> bool: ...
    @property
    def is_enabled(self) -> bool: ...
    # noinspection PyUnresolvedReferences
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @property
    def dependency(self) -> Self | None: ...
    # noinspection PyUnresolvedReferences
    @dependency.setter
    def dependency(self, value: Self | None) -> None: ...
    @property
    def filter(self) -> AbstractFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: AbstractFilter | None) -> None: ...
    def serialize(self, categories: dict[str, int]) -> tuple[dict[str, dict], MAP_STR]: ...
# End BaseParameter class



class InputParameter(BaseParameter):
    """
    Input Parameter
    """
    def __init__(self, label: str, name: STRING = None, category: STRING = None,
                 description: STRING = None, default_value: Any = None,
                 is_required: BOOL = True, is_multi: bool = False,
                 is_enabled: bool = True) -> None: ...
# End InputParameter class


class InputOutputParameter(BaseParameter):
    """
    Input and Output Parameter
    """
    def set_derived(self) -> None: ...
# End InputOutputParameter class


class SchemaMixin:
    """
    Schema Mixin
    """
    schema_type: ClassVar[str]

    def _build_schema(self) -> MAP_STR: ...
# End SchemaMixin class


class AnalysisCellSizeParameter(InputParameter): ...
class MapDocumentParameter(InputParameter): ...
class BooleanParameter(InputParameter): ...
class CadDrawingDatasetParameter(InputOutputParameter): ...
class CalculatorExpressionParameter(InputParameter): ...
class CatalogLayerParameter(InputParameter): ...
class SACellSizeParameter(InputParameter): ...
class CellSizeXYParameter(InputParameter): ...
class CoordinateSystemParameter(InputOutputParameter): ...
class CoverageParameter(InputParameter): ...
class CoverageFeatureClassParameter(InputParameter): ...
class DataElementParameter(InputOutputParameter): ...
class DatasetTypeParameter(InputParameter): ...
class DateParameter(InputParameter): ...
class DbaseTableParameter(InputOutputParameter): ...
class EncryptedStringParameter(InputParameter): ...
class EnvelopeParameter(InputParameter): ...
class ExtentParameter(InputParameter): ...
class FeatureDatasetParameter(InputOutputParameter): ...
class FolderParameter(InputOutputParameter): ...
class GroupLayerParameter(InputOutputParameter): ...
class LasDatasetParameter(InputOutputParameter): ...
class LasDatasetLayerParameter(InputOutputParameter): ...
class GPLayerParameter(InputOutputParameter): ...
class LayerFileParameter(InputOutputParameter): ...
class MapParameter(InputOutputParameter): ...
class MosaicDatasetParameter(InputOutputParameter): ...
class MosaicLayerParameter(InputOutputParameter): ...
class NetworkDatasetParameter(InputOutputParameter): ...
class PointParameter(InputParameter): ...
class PrjFileParameter(InputOutputParameter): ...
class RasterBandParameter(InputOutputParameter): ...
class RasterCalculatorExpressionParameter(InputParameter): ...
class RasterDataLayerParameter(InputOutputParameter): ...
class RelationshipClassParameter(InputOutputParameter): ...
class ShapeFileParameter(InputOutputParameter): ...
class SpatialReferenceParameter(InputParameter): ...
class StringHiddenParameter(InputParameter): ...
class TextfileParameter(InputOutputParameter): ...
class TinParameter(InputOutputParameter): ...
class TinLayerParameter(InputOutputParameter): ...
class TopologyParameter(InputOutputParameter): ...


class FeatureClassParameter(SchemaMixin, InputOutputParameter):
    """
    A collection of spatial data with the same shape type: point,
    multipoint, polyline, and polygon.
    """
    @property
    def filter(self) -> FeatureClassTypeFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: FeatureClassTypeFilter | None) -> None: ...
# End FeatureClassParameter class


class FeatureLayerParameter(InputOutputParameter):
    """
    A reference to a feature class, including symbology and rendering
    properties.
    """
    @property
    def filter(self) -> FeatureClassTypeFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: FeatureClassTypeFilter | None) -> None: ...
# End FeatureLayerParameter class


class FileParameter(InputOutputParameter):
    """
    A file on disk.
    """
    @property
    def filter(self) -> FileTypeFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: FileTypeFilter | None) -> None: ...
# End FileParameter class


class RasterDatasetParameter(InputOutputParameter): ...
class RasterLayerParameter(InputOutputParameter): ...
class TableParameter(SchemaMixin, InputOutputParameter): ...
class TableViewParameter(InputOutputParameter): ...


_GEOG_TYPES: TYPE_PARAMS = (
        FeatureClassParameter | FeatureLayerParameter |
        RasterDatasetParameter | RasterLayerParameter
)
_TABLE_AND_GEOGRAPHIC_TYPES: TYPE_PARAMS = (
    TableParameter | TableViewParameter |
    FeatureClassParameter | FeatureLayerParameter |
    RasterDatasetParameter | RasterLayerParameter
)


class ArealUnitParameter(InputParameter):
    """
    An areal unit type and value, such as square meter or acre.
    """
    @property
    def dependency(self) -> _GEOG_TYPES: ...
    # noinspection PyUnresolvedReferences
    @dependency.setter
    def dependency(self, value: _GEOG_TYPES) -> None: ...
    def filter(self) -> ArealUnitFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: ArealUnitFilter | None) -> None: ...
# End ArealUnitParameter class


class FieldParameter(InputParameter):
    """
    A column in a table that stores the values for a single attribute.
    """
    @property
    def dependency(self) -> _TABLE_AND_GEOGRAPHIC_TYPES: ...
    # noinspection PyUnresolvedReferences
    @dependency.setter
    def dependency(self, value: _TABLE_AND_GEOGRAPHIC_TYPES) -> None: ...
    def filter(self) -> FieldTypeFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: FieldTypeFilter | None) -> None: ...
# End FieldParameter class


class LinearUnitParameter(InputParameter):
    """
    A linear unit type and value such as meter or feet.
    """
    @property
    def dependency(self) -> _GEOG_TYPES: ...
    # noinspection PyUnresolvedReferences
    @dependency.setter
    def dependency(self, value: _GEOG_TYPES) -> None: ...
    @property
    def filter(self) -> LinearUnitFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: LinearUnitFilter | None) -> None: ...
# End LinearUnitParameter class


class SQLExpressionParameter(InputParameter):
    """
    A syntax for defining and manipulating data from a relational
    database.
    """
    @property
    def dependency(self) -> _TABLE_AND_GEOGRAPHIC_TYPES: ...
    # noinspection PyUnresolvedReferences
    @dependency.setter
    def dependency(self, value: _TABLE_AND_GEOGRAPHIC_TYPES) -> None: ...
# End SQLExpressionParameter class


class WorkspaceParameter(InputOutputParameter):
    """
    A container such as a geodatabase or folder.
    """
    @property
    def filter(self) -> WorkspaceTypeFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: WorkspaceTypeFilter | None) -> None: ...
# End WorkspaceParameter class


class DoubleParameter(InputParameter):
    """
    Any floating-point number stored as a double precision, 64-bit value.
    """
    @property
    def filter(self) -> DoubleRangeFilter | DoubleValueFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: DoubleRangeFilter | DoubleValueFilter | None) -> None: ...
# End DoubleParameter class


class LongParameter(InputParameter):
    """
    An integer number value.
    """
    @property
    def filter(self) -> LongRangeFilter | LongValueFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: LongRangeFilter | LongValueFilter | None) -> None: ...
# End LongParameter class


class StringParameter(InputOutputParameter):
    """
    A text value.
    """
    def _build_filter(self) -> tuple[dict, MAP_STR]: ...
    @property
    def filter(self) -> StringValueFilter | None: ...
    # noinspection PyUnresolvedReferences
    @filter.setter
    def filter(self, value: StringValueFilter | None) -> None: ...
# End StringParameter class


if __name__ == '__main__':  # pragma: no cover
    pass
